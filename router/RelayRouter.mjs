// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as $$History from "history";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactRouter from "react-router";
import * as RelaySSRUtils from "./RelaySSRUtils.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as RelayRouter__Bindings from "./RelayRouter__Bindings.mjs";

function runAtPriority(cb, priority) {
  if (RelaySSRUtils.ssr) {
    return ;
  }
  switch (priority) {
    case /* High */0 :
        Curry._1(cb, undefined);
        return ;
    case /* Default */1 :
        var id = window.requestIdleCallback(cb, {
              timeout: 2000
            });
        return (function (param) {
                  window.cancelIdleCallback(id);
                  
                });
    case /* Low */2 :
        var id$1 = window.requestIdleCallback(cb, undefined);
        return (function (param) {
                  window.cancelIdleCallback(id$1);
                  
                });
    
  }
}

function prepareMatches(matches, environment, queryParams, $$location) {
  return matches.map(function (match) {
              return {
                      render: match.route.prepare(environment, match.params, queryParams, $$location)
                    };
            });
}

function makeBrowserEnvironment(param) {
  return $$History.createBrowserHistory();
}

function makeServerEnvironment(initialUrl) {
  return $$History.createMemoryHistory({
              initialEntries: [initialUrl]
            });
}

var RouterEnvironment = {
  makeBrowserEnvironment: makeBrowserEnvironment,
  makeServerEnvironment: makeServerEnvironment
};

var dictDelete = (function(dict, key) { delete dict[key] });

function make(routes, history, environment) {
  var preparedAssetsMap = {};
  var $$location = history.location;
  var initialQueryParams = RelayRouter__Bindings.QueryParams.parse($$location.search);
  var initialMatches = Belt_Option.getWithDefault(Caml_option.nullable_to_opt(ReactRouter.matchRoutes(routes, $$location)), []);
  var preparedMatches = prepareMatches(initialMatches, environment, initialQueryParams, $$location);
  RelaySSRUtils.setHasPreparedInitialRoutes(undefined);
  var currentEntry = {
    contents: {
      location: $$location,
      preparedMatches: preparedMatches
    }
  };
  var nextId = {
    contents: 0
  };
  var subscribers = {};
  var cleanup = history.listen(function (param) {
        var $$location = param.location;
        if ($$location.pathname === currentEntry.contents.location.pathname) {
          return ;
        }
        var queryParams = RelayRouter__Bindings.QueryParams.parse($$location.search);
        var matches = Belt_Option.getWithDefault(Caml_option.nullable_to_opt(ReactRouter.matchRoutes(routes, $$location)), []);
        var preparedMatches = prepareMatches(matches, environment, queryParams, $$location);
        currentEntry.contents = {
          location: $$location,
          preparedMatches: preparedMatches
        };
        return Belt_Array.forEach(Js_dict.values(subscribers), (function (subscriber) {
                      return Curry._1(subscriber, currentEntry.contents);
                    }));
      });
  var runOnEachRouteMatch = function (preloadUrl, cb) {
    var fullUrl = window.location.origin + preloadUrl;
    var url = new URL(fullUrl);
    var queryParams = RelayRouter__Bindings.QueryParams.parse(Belt_Option.getWithDefault(url.search, ""));
    var location_pathname = url.pathname;
    var location_search = Belt_Option.getWithDefault(url.search, "");
    var location_hash = url.hash;
    var location_state = url.state;
    var $$location = {
      pathname: location_pathname,
      search: location_search,
      hash: location_hash,
      state: location_state,
      key: "-"
    };
    return Belt_Array.forEach(Belt_Option.getWithDefault(Caml_option.nullable_to_opt(ReactRouter.matchRoutes(routes, $$location)), []), (function (match) {
                  return Curry._3(cb, match, queryParams, $$location);
                }));
  };
  var preloadCode = function (preloadUrl, priorityOpt, param) {
    var priority = priorityOpt !== undefined ? priorityOpt : /* Default */1;
    var doPreloadAsset = function (param) {
      var assetIdentifier;
      assetIdentifier = param.TAG === /* Component */0 ? "component:" + param.moduleName : "image:" + param.url;
      var match = Js_dict.get(preparedAssetsMap, assetIdentifier);
      if (match !== undefined) {
        return ;
      }
      preparedAssetsMap[assetIdentifier] = true;
      if (param.TAG !== /* Component */0) {
        return ;
      }
      var eagerPreloadFn = param.eagerPreloadFn;
      return Curry._1(eagerPreloadFn, undefined);
    };
    return runOnEachRouteMatch(preloadUrl, (function (match, queryParams, param) {
                  runAtPriority((function (param) {
                          var __x = match.route.preloadCode(environment, match.params, queryParams, $$location);
                          __x.then(function (assetsToPreload) {
                                Belt_Array.forEach(assetsToPreload, doPreloadAsset);
                                return Promise.resolve(undefined);
                              });
                          
                        }), priority);
                  
                }));
  };
  var preload = function (preloadUrl, priorityOpt, param) {
    var priority = priorityOpt !== undefined ? priorityOpt : /* Default */1;
    return runOnEachRouteMatch(preloadUrl, (function (match, queryParams, $$location) {
                  runAtPriority((function (param) {
                          match.route.prepare(environment, match.params, queryParams, $$location);
                          
                        }), priority);
                  
                }));
  };
  var get = function (param) {
    return currentEntry.contents;
  };
  var subscribe = function (cb) {
    nextId.contents = nextId.contents + 1 | 0;
    var id = nextId.contents;
    subscribers[String(id)] = cb;
    return function (param) {
      return dictDelete(subscribers, String(id));
    };
  };
  var routerEventListeners = {
    contents: []
  };
  return [
          cleanup,
          {
            preload: preload,
            preloadCode: preloadCode,
            get: get,
            subscribe: subscribe,
            history: history,
            subscribeToEvent: (function (callback) {
                routerEventListeners.contents.push(callback);
                return function (param) {
                  routerEventListeners.contents = Belt_Array.keep(routerEventListeners.contents, (function (cb) {
                          return cb !== callback;
                        }));
                  
                };
              }),
            postRouterEvent: (function ($$event) {
                return Belt_Array.forEach(routerEventListeners.contents, (function (cb) {
                              return Curry._1(cb, $$event);
                            }));
              })
          }
        ];
}

var Router = {
  make: make
};

var context = React.createContext(undefined);

var make$1 = context.Provider;

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var Provider = {
  make: make$1,
  makeProps: makeProps
};

function useRouterContext(param) {
  return React.useContext(context);
}

function RelayRouter$RouteComponent(Props) {
  return Props.render(Props.children);
}

function RelayRouter$RouteRenderer(Props) {
  var renderPending = Props.renderPending;
  var renderFallback = Props.renderFallback;
  var router = useRouterContext(undefined);
  var match = React.useTransition();
  var startTransition = match[1];
  var isPending = match[0];
  var match$1 = React.useState(function () {
        return Curry._1(router.get, undefined);
      });
  var setRouteEntry = match$1[1];
  var routeEntry = match$1[0];
  if (!RelaySSRUtils.ssr) {
    React.useLayoutEffect((function () {
            if (!isPending) {
              Curry._1(router.postRouterEvent, {
                    TAG: /* RestoreScroll */1,
                    _0: routeEntry.location
                  });
            }
            
          }), [isPending]);
  }
  React.useEffect((function () {
          return Curry._1(router.subscribe, (function (nextRoute) {
                        return Curry._1(startTransition, (function (param) {
                                      return Curry._1(setRouteEntry, (function (param) {
                                                    return nextRoute;
                                                  }));
                                    }));
                      }));
        }), [
        router,
        startTransition
      ]);
  var reversedItems = routeEntry.preparedMatches.slice().reverse();
  var renderedContent = {
    contents: null
  };
  reversedItems.forEach(function (param) {
        renderedContent.contents = React.createElement(RelayRouter$RouteComponent, {
              render: param.render,
              children: renderedContent.contents
            });
        
      });
  return React.createElement(React.Fragment, undefined, renderPending !== undefined ? Curry._1(renderPending, isPending) : null, React.createElement(React.Suspense, {
                  children: renderedContent.contents,
                  fallback: renderFallback !== undefined ? Curry._1(renderFallback, undefined) : null
                }));
}

var RouteRenderer = {
  make: RelayRouter$RouteRenderer
};

function useRegisterPreloadedAsset(asset) {
  var registerAsset = RelaySSRUtils.AssetRegisterer.use(undefined);
  try {
    if (RelaySSRUtils.ssr) {
      return Curry._1(registerAsset, asset);
    } else {
      return ;
    }
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return ;
    }
    throw exn;
  }
}

export {
  RouterEnvironment ,
  runAtPriority ,
  Router ,
  Provider ,
  useRouterContext ,
  RouteRenderer ,
  useRegisterPreloadedAsset ,
  
}
/* context Not a pure module */
