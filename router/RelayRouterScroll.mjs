// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as RelayRouter from "./RelayRouter.mjs";
import * as RelaySSRUtils from "./RelaySSRUtils.mjs";
import * as RelayRouterUtils from "./RelayRouterUtils.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var tmp;

if (RelaySSRUtils.ssr) {
  tmp = {};
} else {
  try {
    tmp = Belt_Option.getWithDefault(Belt_Option.map(Caml_option.nullable_to_opt(sessionStorage.getItem("RESCRIPT_RELAY_ROUTER_SCROLL_POS")), (function (positionsRaw) {
                return JSON.parse(positionsRaw);
              })), {});
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      tmp = {};
    } else {
      throw exn;
    }
  }
}

var scrollPositionsY = {
  contents: tmp
};

var context = React.createContext(undefined);

var make = context.Provider;

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

function RelayRouterScroll$TargetScrollElement$Provider(Props) {
  var id = Props.id;
  var targetElementRef = Props.targetElementRef;
  var children = Props.children;
  return React.createElement(make, makeProps(React.useMemo((function () {
                        if (targetElementRef !== undefined) {
                          return {
                                  id: id,
                                  targetElementRef: targetElementRef
                                };
                        }
                        
                      }), [
                      id,
                      targetElementRef
                    ]), children, undefined));
}

var Provider = {
  make: RelayRouterScroll$TargetScrollElement$Provider
};

function useTargetElement(param) {
  return React.useContext(context);
}

function getScrollPosId($$location, id) {
  return id + ":" + $$location.key;
}

function getElement(targetElement) {
  if (targetElement.TAG === /* Window */0) {
    return Caml_option.some(targetElement._0);
  } else {
    return Caml_option.nullable_to_opt(targetElement._0.current);
  }
}

function RelayRouterScroll$ScrollRestoration(Props) {
  var $$location = RelayRouterUtils.useLocation(undefined);
  var router = RelayRouter.useRouterContext(undefined);
  var targetEl = React.useContext(context);
  var match = React.useMemo((function () {
          if (targetEl !== undefined) {
            return [
                    targetEl.id,
                    {
                      TAG: /* Element */1,
                      _0: targetEl.targetElementRef
                    }
                  ];
          } else {
            return [
                    "window",
                    {
                      TAG: /* Window */0,
                      _0: window
                    }
                  ];
          }
        }), [targetEl]);
  var targetElement = match[1];
  var id = match[0];
  var setScrollPosition = React.useCallback((function (param) {
          var targetElement$1 = getElement(targetElement);
          if (targetElement$1 !== undefined) {
            scrollPositionsY.contents[getScrollPosId($$location, id)] = Caml_option.valFromOption(targetElement$1).scrollTop;
            return ;
          }
          
        }), [
        $$location,
        targetElement,
        id
      ]);
  var persistScrollPositions = React.useCallback((function (priority) {
          var targetElement$1 = getElement(targetElement);
          if (targetElement$1 !== undefined) {
            scrollPositionsY.contents[getScrollPosId($$location, id)] = Caml_option.valFromOption(targetElement$1).scrollTop;
            RelayRouter.runAtPriority((function (param) {
                    var stringifiedPositions = JSON.stringify(scrollPositionsY.contents);
                    if (stringifiedPositions !== undefined) {
                      sessionStorage.setItem("RESCRIPT_RELAY_ROUTER_SCROLL_POS", stringifiedPositions);
                      return ;
                    }
                    
                  }), priority);
            return ;
          }
          
        }), [
        $$location,
        targetElement,
        id
      ]);
  var onBeforeUnload = React.useCallback((function (param) {
          Curry._1(setScrollPosition, undefined);
          return Curry._1(persistScrollPositions, /* High */0);
        }), [
        setScrollPosition,
        persistScrollPositions
      ]);
  React.useEffect((function () {
          window.addEventListener("beforeunload", onBeforeUnload);
          return (function (param) {
                    window.removeEventListener("beforeunload", onBeforeUnload);
                    
                  });
        }), [onBeforeUnload]);
  React.useEffect((function () {
          return Curry._1(router.subscribeToEvent, (function ($$event) {
                        if ($$event.TAG === /* OnBeforeNavigation */0) {
                          Curry._1(setScrollPosition, undefined);
                          return Curry._1(persistScrollPositions, /* Low */2);
                        }
                        var $$location = $$event._0;
                        var match = getElement(targetElement);
                        var match$1 = Js_dict.get(scrollPositionsY.contents, getScrollPosId($$location, id));
                        if (match === undefined) {
                          return ;
                        }
                        var targetElement$1 = Caml_option.valFromOption(match);
                        if (match$1 !== undefined) {
                          targetElement$1.scrollTo(0, match$1);
                          return ;
                        }
                        var hashElement = document.getElementById($$location.hash.slice(1));
                        if (hashElement == null) {
                          targetElement$1.scrollTo(0, 0);
                        } else {
                          hashElement.scrollIntoView();
                        }
                        
                      }));
        }), [
        router.subscribeToEvent,
        setScrollPosition,
        persistScrollPositions,
        targetElement,
        $$location
      ]);
  return null;
}

var TargetScrollElement = {
  Provider: Provider,
  useTargetElement: useTargetElement
};

var ScrollRestoration = {
  make: RelayRouterScroll$ScrollRestoration
};

export {
  TargetScrollElement ,
  ScrollRestoration ,
  
}
/* scrollPositionsY Not a pure module */
