// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as RelayRouter from "./RelayRouter.mjs";
import * as RelaySSRUtils from "./RelaySSRUtils.mjs";
import * as RelayRouterScroll from "./RelayRouterScroll.mjs";

function isModifiedEvent(e) {
  var match = e.metaKey;
  var match$1 = e.altKey;
  var match$2 = e.ctrlKey;
  var match$3 = e.shiftKey;
  if (match$2 || match$3 || match$1 || match) {
    return true;
  } else {
    return false;
  }
}

function RelayRouterLink(Props) {
  var to_ = Props.to_;
  var title = Props.title;
  var id = Props.id;
  var className = Props.className;
  var browserTarget = Props.target;
  var modeOpt = Props.mode;
  var preloadPriorityOpt = Props.preloadPriority;
  var preloadDataOpt = Props.preloadData;
  var preloadCodeOpt = Props.preloadCode;
  var children = Props.children;
  var onClick = Props.onClick;
  var style = Props.style;
  var tabIndex = Props.tabIndex;
  var mode = modeOpt !== undefined ? modeOpt : "push";
  var preloadPriority = preloadPriorityOpt !== undefined ? preloadPriorityOpt : /* Default */1;
  var preloadData = preloadDataOpt !== undefined ? preloadDataOpt : /* OnIntent */2;
  var preloadCode = preloadCodeOpt !== undefined ? preloadCodeOpt : /* OnInView */3;
  var linkElement = React.useRef(null);
  var hasPreloaded = React.useRef(false);
  var router = RelayRouter.useRouterContext(undefined);
  var history = router.history;
  var targetElementRef = RelayRouterScroll.TargetScrollElement.useTargetElement(undefined);
  var changeRoute = React.useCallback((function (e) {
          Curry._1(router.postRouterEvent, {
                TAG: /* OnBeforeNavigation */0,
                currentLocation: Curry._1(router.get, undefined).location
              });
          var match = e.isDefaultPrevented();
          var match$1 = e.button;
          var match$2 = isModifiedEvent(e);
          if (match) {
            return ;
          }
          if (match$1 !== 0) {
            return ;
          }
          if (browserTarget !== undefined && browserTarget !== "self") {
            return ;
          }
          if (match$2) {
            return ;
          } else {
            e.preventDefault();
            if (mode === "replace") {
              history.replace(to_);
            } else {
              history.push(to_);
            }
            return ;
          }
        }), [
        to_,
        history,
        router.postRouterEvent
      ]);
  var doPreloadDataAndCode = React.useCallback((function (overridePriority) {
          return Curry._3(router.preload, to_, Belt_Option.getWithDefault(overridePriority, preloadPriority), undefined);
        }), [
        to_,
        router.preload,
        preloadPriority
      ]);
  var doPreloadCode = React.useCallback((function (overridePriority) {
          return Curry._3(router.preloadCode, to_, Belt_Option.getWithDefault(overridePriority, preloadPriority), undefined);
        }), [
        to_,
        router.preloadCode,
        preloadPriority
      ]);
  var onIntent = React.useCallback((function (overridePriority) {
          if (preloadData !== 2) {
            if (preloadCode !== 2) {
              return ;
            } else {
              return Curry._1(doPreloadCode, overridePriority);
            }
          } else {
            return Curry._1(doPreloadDataAndCode, overridePriority);
          }
        }), [
        preloadData,
        preloadCode,
        doPreloadCode,
        doPreloadDataAndCode
      ]);
  var onRender = React.useCallback((function (overridePriority) {
          if (preloadData !== 1) {
            if (preloadCode !== 1) {
              return ;
            } else {
              return Curry._1(doPreloadCode, overridePriority);
            }
          } else {
            return Curry._1(doPreloadDataAndCode, overridePriority);
          }
        }), [
        preloadData,
        preloadCode,
        doPreloadCode,
        doPreloadDataAndCode
      ]);
  React.useEffect((function () {
          Curry._1(onRender, undefined);
          
        }), [onRender]);
  if (RelaySSRUtils.ssr) {
    Curry._1(onRender, undefined);
  }
  React.useEffect((function () {
          var match = linkElement.current;
          var linkElement$1;
          if (match == null) {
            return ;
          }
          if (preloadData >= 3) {
            linkElement$1 = match;
          } else {
            if (preloadCode < 3) {
              return ;
            }
            linkElement$1 = match;
          }
          var observer = new IntersectionObserver((function (entries) {
                  var isVisible = Belt_Array.some(entries, (function (entry) {
                          if (entry.isIntersecting) {
                            return entry.target === linkElement$1;
                          } else {
                            return false;
                          }
                        }));
                  var match = hasPreloaded.current;
                  if (match || !isVisible) {
                    return ;
                  } else if (preloadData >= 3) {
                    Curry._1(doPreloadDataAndCode, undefined);
                    hasPreloaded.current = true;
                    return ;
                  } else if (preloadCode >= 3) {
                    Curry._1(doPreloadCode, undefined);
                    hasPreloaded.current = true;
                    return ;
                  } else {
                    return ;
                  }
                }), {
                threshold: 1,
                root: targetElementRef !== undefined ? Caml_option.nullable_to_opt(targetElementRef.targetElementRef.current) : undefined
              });
          observer.observe(linkElement$1);
          return (function (param) {
                    observer.disconnect();
                    
                  });
        }), [
        preloadCode,
        preloadData,
        doPreloadCode,
        doPreloadDataAndCode
      ]);
  var tmp = {
    ref: linkElement,
    href: to_,
    target: browserTarget !== undefined ? (
        browserTarget === "blank" ? "_blank" : "_self"
      ) : "",
    onFocus: (function (param) {
        return Curry._1(onIntent, undefined);
      }),
    onClick: (function (e) {
        Curry._1(changeRoute, e);
        if (onClick !== undefined) {
          return Curry._1(onClick, undefined);
        }
        
      }),
    onMouseDown: (function (param) {
        return Curry._1(doPreloadDataAndCode, /* High */0);
      }),
    onMouseEnter: (function (param) {
        return Curry._1(onIntent, undefined);
      }),
    onTouchStart: (function (param) {
        return Curry._1(doPreloadDataAndCode, /* High */0);
      })
  };
  if (className !== undefined) {
    tmp.className = Caml_option.valFromOption(className);
  }
  if (id !== undefined) {
    tmp.id = Caml_option.valFromOption(id);
  }
  if (style !== undefined) {
    tmp.style = Caml_option.valFromOption(style);
  }
  if (tabIndex !== undefined) {
    tmp.tabIndex = Caml_option.valFromOption(tabIndex);
  }
  if (title !== undefined) {
    tmp.title = Caml_option.valFromOption(title);
  }
  return React.createElement("a", tmp, children);
}

var make = RelayRouterLink;

export {
  make ,
  
}
/* react Not a pure module */
