// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Vitest from "../src/bindings/Vitest.mjs";
import * as Vitest$1 from "vitest";
import * as RescriptRelayRouterCli__Utils from "../cli/RescriptRelayRouterCli__Utils.mjs";

Vitest.describe("Query params", undefined, (function (param) {
        Vitest.test("turns param type to string", undefined, (function (_t) {
                Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toTypeStr(/* String */0)).toBe("string");
                Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toTypeStr(/* Boolean */1)).toBe("bool");
                Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toTypeStr(/* Int */2)).toBe("int");
                Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toTypeStr(/* Float */3)).toBe("float");
                Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toTypeStr({
                            TAG: /* CustomModule */1,
                            moduleName: "SomeModule.SomeInnerModule"
                          })).toBe("SomeModule.SomeInnerModule.t");
                Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toTypeStr({
                            TAG: /* Array */0,
                            _0: /* String */0
                          })).toBe("array<string>");
                Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toTypeStr({
                            TAG: /* Array */0,
                            _0: /* Boolean */1
                          })).toBe("array<bool>");
                Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toTypeStr({
                            TAG: /* Array */0,
                            _0: /* Int */2
                          })).toBe("array<int>");
                Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toTypeStr({
                            TAG: /* Array */0,
                            _0: /* Float */3
                          })).toBe("array<float>");
                Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toTypeStr({
                            TAG: /* Array */0,
                            _0: {
                              TAG: /* CustomModule */1,
                              moduleName: "SomeModule.SomeInnerModule"
                            }
                          })).toBe("array<SomeModule.SomeInnerModule.t>");
                
              }));
        return Vitest.test("serializes query param types", undefined, (function (_t) {
                      Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toSerializer(/* String */0, "propName")).toBe("propName->Js.Global.encodeURIComponent");
                      Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toSerializer(/* Boolean */1, "propName")).toBe("string_of_bool(propName)");
                      Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toSerializer(/* Int */2, "propName")).toBe("Belt.Int.toString(propName)");
                      Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toSerializer(/* Float */3, "propName")).toBe("Js.Float.toString(propName)");
                      Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toSerializer({
                                  TAG: /* CustomModule */1,
                                  moduleName: "SomeModule"
                                }, "propName")).toBe("propName->SomeModule.serialize->Js.Global.encodeURIComponent");
                      Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toSerializer({
                                  TAG: /* Array */0,
                                  _0: /* String */0
                                }, "propName")).toBe("propName->Belt.Array.map(Js.Global.encodeURIComponent)->Js.Array2.joinWith(\",\")");
                      Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toSerializer({
                                  TAG: /* Array */0,
                                  _0: /* Boolean */1
                                }, "propName")).toBe("propName->Belt.Array.map(string_of_bool)->Js.Array2.joinWith(\",\")");
                      Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toSerializer({
                                  TAG: /* Array */0,
                                  _0: /* Int */2
                                }, "propName")).toBe("propName->Belt.Array.map(Belt.Int.toString)->Js.Array2.joinWith(\",\")");
                      Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toSerializer({
                                  TAG: /* Array */0,
                                  _0: /* Float */3
                                }, "propName")).toBe("propName->Belt.Array.map(Js.Float.toString)->Js.Array2.joinWith(\",\")");
                      Vitest$1.expect(RescriptRelayRouterCli__Utils.QueryParams.toSerializer({
                                  TAG: /* Array */0,
                                  _0: {
                                    TAG: /* CustomModule */1,
                                    moduleName: "SomeModule"
                                  }
                                }, "propName")).toBe("propName->Belt.Array.map(value => value->SomeModule.serialize->Js.Global.encodeURIComponent)->Js.Array2.joinWith(\",\")");
                      
                    }));
      }));

var U;

export {
  U ,
  
}
/*  Not a pure module */
