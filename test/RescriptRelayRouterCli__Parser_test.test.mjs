// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Vitest from "../src/bindings/Vitest.mjs";
import * as Vitest$1 from "vitest";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as JsoncParser from "jsonc-parser";
import * as LinesAndColumns from "lines-and-columns";
import * as RescriptRelayRouterCli__Parser from "../cli/RescriptRelayRouterCli__Parser.mjs";

function makeMockParserCtx(content, routeFileNameOpt, routeFilesOpt, param) {
  var routeFileName = routeFileNameOpt !== undefined ? routeFileNameOpt : "routes.json";
  var routeFiles = routeFilesOpt !== undefined ? Caml_option.valFromOption(routeFilesOpt) : ({});
  var lineLookup = new LinesAndColumns.LinesAndColumns(content);
  return {
          routeFileName: routeFileName,
          lineLookup: lineLookup,
          addDecodeError: (function (param, param$1) {
              
            }),
          getRouteFile: (function (fileName, param) {
              var rawText = Js_dict.get(routeFiles, fileName);
              if (rawText !== undefined) {
                return {
                        TAG: /* Ok */0,
                        _0: {
                          fileName: fileName,
                          rawText: rawText,
                          content: []
                        }
                      };
              } else {
                return {
                        TAG: /* Error */1,
                        _0: "Route file not mocked."
                      };
              }
            })
        };
}

Vitest.describe("Parsing", undefined, (function (param) {
        return Vitest.test("path params are inherited from parent routes", undefined, (function (_t) {
                      var mockContent = "[\n    {\n        \"name\": \"Organization\", \n        \"path\": \"/o/:slug\",\n        \"children\": [\n            {\n                \"name\": \"Member\",\n                \"path\": \"member/:memberId\"\n            }\n        ]\n    }\n]";
                      var ctx = makeMockParserCtx(mockContent, undefined, undefined, undefined);
                      var parentContext = RescriptRelayRouterCli__Parser.emptyParentCtx(undefined);
                      var parsed = Belt_Option.flatMap(JsoncParser.parseTree(mockContent, [], {"disallowComments": false,"allowTrailingComma": true,"allowEmptyContent": true}), (function (node) {
                              return RescriptRelayRouterCli__Parser.ReScriptTransformer.transformNode(node, ctx);
                            }));
                      var routes = RescriptRelayRouterCli__Parser.Decode.decode(parsed, ctx, parentContext);
                      Vitest$1.expect.assertions(2);
                      if (routes.length !== 1) {
                        return ;
                      }
                      var match = routes[0];
                      if (match.TAG === /* Include */0) {
                        return ;
                      }
                      var match$1 = match._0;
                      var match$2 = match$1.children;
                      if (match$2 === undefined) {
                        return ;
                      }
                      if (match$2.length !== 1) {
                        return ;
                      }
                      var match$3 = match$2[0];
                      if (match$3.TAG === /* Include */0) {
                        return ;
                      }
                      Vitest$1.expect(Belt_Array.map(match$1.pathParams, (function (param) {
                                    return param.text;
                                  }))).toEqual(["slug"]);
                      Vitest$1.expect(Belt_Array.map(match$3._0.pathParams, (function (param) {
                                    return param.text;
                                  }))).toEqual([
                            "memberId",
                            "slug"
                          ]);
                      
                    }));
      }));

var P;

var Bindings;

export {
  P ,
  Bindings ,
  makeMockParserCtx ,
  
}
/*  Not a pure module */
