// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as RelayEnv from "../../RelayEnv.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as RescriptReactErrorBoundary from "@rescript/react/src/RescriptReactErrorBoundary.mjs";

var Data_not_mocked_properly = /* @__PURE__ */Caml_exceptions.create("RelayStorybookEnv.Data_not_mocked_properly");

function makeStorybookMockNetworkLayer(param) {
  return RelayRuntime.Network.create((function (param, param$1, param$2, param$3) {
                throw {
                      RE_EXN_ID: Data_not_mocked_properly,
                      Error: new Error()
                    };
              }), undefined);
}

function makeStorybookEnv(network) {
  return RelayEnv.makeEnvironmentWithNetwork(network, [
              RescriptRelay.MissingFieldHandler.makeScalarMissingFieldHandler(function (field, record, args, _store) {
                    console.log("missing scalar field", {
                          field: field,
                          record: record,
                          args: args
                        });
                    
                  }),
              RescriptRelay.MissingFieldHandler.makeLinkedMissingFieldHandler(function (field, record, args, _store) {
                    console.log("missing linked field", {
                          field: field,
                          record: record,
                          args: args
                        });
                    return Js_null_undefined.fromOption(undefined);
                  }),
              RescriptRelay.MissingFieldHandler.makePluralLinkedMissingFieldHandler(function (field, record, args, _store) {
                    console.log("missing plural linked field", {
                          field: field,
                          record: record,
                          args: args
                        });
                    return Js_null_undefined.fromOption(undefined);
                  })
            ], undefined);
}

function RelayStorybookEnv$StorybookRelayEnvMockData(Props) {
  var children = Props.children;
  var initWithEnvironment = Props.initWithEnvironment;
  var match = React.useState(function () {
        return false;
      });
  var setInited = match[1];
  var environment = React.useMemo((function () {
          return makeStorybookEnv(makeStorybookMockNetworkLayer(undefined));
        }), []);
  React.useEffect((function () {
          Curry._1(initWithEnvironment, environment);
          Curry._1(setInited, (function (param) {
                  return true;
                }));
          
        }), [environment]);
  if (match[0]) {
    return React.createElement(RescriptReactErrorBoundary.make, {
                children: React.createElement(RescriptRelay.Context.Provider.make, {
                      environment: environment,
                      children: children
                    }),
                fallback: (function (err) {
                    console.log(err);
                    return "Seems like you did not mock your data properly. Mock it and try again.";
                  })
              });
  } else {
    return null;
  }
}

var StorybookRelayEnvMockData = {
  make: RelayStorybookEnv$StorybookRelayEnvMockData
};

export {
  Data_not_mocked_properly ,
  makeStorybookMockNetworkLayer ,
  makeStorybookEnv ,
  StorybookRelayEnvMockData ,
  
}
/* react Not a pure module */
