// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Vitest from "vitest";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Js_undefined from "rescript/lib/es6/js_undefined.js";

function MakeRunner(Runner) {
  var describe = function (name, timeout, callback) {
    return Curry._3(Runner.describe, name, (function (param) {
                  Curry._1(callback, undefined);
                  
                }), Js_undefined.fromOption(timeout));
  };
  var test = function (name, timeout, callback) {
    return Curry._3(Runner.test, name, (function (param) {
                  Curry._1(callback, Vitest.expect);
                  
                }), Js_undefined.fromOption(timeout));
  };
  var testPromise = function (name, timeout, callback) {
    return Curry._3(Runner.testPromise, name, (function (param) {
                  return Curry._1(callback, Vitest.expect);
                }), Js_undefined.fromOption(timeout));
  };
  var it = function (name, timeout, callback) {
    return Curry._3(Runner.it, name, (function (param) {
                  Curry._1(callback, Vitest.expect);
                  
                }), Js_undefined.fromOption(timeout));
  };
  var itPromise = function (name, timeout, callback) {
    return Curry._3(Runner.itPromise, name, (function (param) {
                  return Curry._1(callback, Vitest.expect);
                }), Js_undefined.fromOption(timeout));
  };
  return {
          describe: describe,
          test: test,
          testPromise: testPromise,
          it: it,
          itPromise: itPromise
        };
}

function MakeConcurrentRunner(Runner) {
  var describe = function (name, timeout, callback) {
    return Curry._3(Runner.describe, name, (function (param) {
                  Curry._1(callback, undefined);
                  
                }), Js_undefined.fromOption(timeout));
  };
  var test = function (name, timeout, callback) {
    return Curry._3(Runner.test, name, (function (param) {
                  return Curry._1(callback, Vitest.expect);
                }), Js_undefined.fromOption(timeout));
  };
  var it = function (name, timeout, callback) {
    return Curry._3(Runner.it, name, (function (param) {
                  return Curry._1(callback, Vitest.expect);
                }), Js_undefined.fromOption(timeout));
  };
  return {
          describe: describe,
          test: test,
          it: it
        };
}

function Runner_describe(prim0, prim1, prim2) {
  Vitest.describe(prim0, (function () {
          return Curry._1(prim1, undefined);
        }), prim2);
  
}

function Runner_test(prim0, prim1, prim2) {
  Vitest.test(prim0, (function () {
          return Curry._1(prim1, undefined);
        }), prim2);
  
}

function Runner_testPromise(prim0, prim1, prim2) {
  Vitest.test(prim0, (function () {
          return Curry._1(prim1, undefined);
        }), prim2);
  
}

function Runner_it(prim0, prim1, prim2) {
  Vitest.it(prim0, (function () {
          return Curry._1(prim1, undefined);
        }), prim2);
  
}

function Runner_itPromise(prim0, prim1, prim2) {
  Vitest.it(prim0, (function () {
          return Curry._1(prim1, undefined);
        }), prim2);
  
}

function describe(name, timeout, callback) {
  return Curry._3(Runner_describe, name, (function (param) {
                Curry._1(callback, undefined);
                
              }), Js_undefined.fromOption(timeout));
}

function test(name, timeout, callback) {
  return Curry._3(Runner_test, name, (function (param) {
                Curry._1(callback, Vitest.expect);
                
              }), Js_undefined.fromOption(timeout));
}

function testPromise(name, timeout, callback) {
  return Curry._3(Runner_testPromise, name, (function (param) {
                return Curry._1(callback, Vitest.expect);
              }), Js_undefined.fromOption(timeout));
}

function it(name, timeout, callback) {
  return Curry._3(Runner_it, name, (function (param) {
                Curry._1(callback, Vitest.expect);
                
              }), Js_undefined.fromOption(timeout));
}

function itPromise(name, timeout, callback) {
  return Curry._3(Runner_itPromise, name, (function (param) {
                return Curry._1(callback, Vitest.expect);
              }), Js_undefined.fromOption(timeout));
}

var partial_arg = Vitest.describe;

var partial_arg$1 = Vitest.test;

var partial_arg$2 = Vitest.it;

function describe$1(name, timeout, callback) {
  var param = function (param$1) {
    Curry._1(callback, undefined);
    
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg.concurrent(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

function test$1(name, timeout, callback) {
  var param = function (param$1) {
    return Curry._1(callback, Vitest.expect);
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$1.concurrent(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

function it$1(name, timeout, callback) {
  var param = function (param$1) {
    return Curry._1(callback, Vitest.expect);
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$2.concurrent(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

var Concurrent = {
  describe: describe$1,
  test: test$1,
  it: it$1
};

var partial_arg$3 = Vitest.describe;

var partial_arg$4 = Vitest.test;

var partial_arg$5 = Vitest.test;

var partial_arg$6 = Vitest.it;

var partial_arg$7 = Vitest.it;

function describe$2(name, timeout, callback) {
  var param = function (param$1) {
    Curry._1(callback, undefined);
    
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$3.only(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

function test$2(name, timeout, callback) {
  var param = function (param$1) {
    Curry._1(callback, Vitest.expect);
    
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$4.only(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

function testPromise$1(name, timeout, callback) {
  var param = function (param$1) {
    return Curry._1(callback, Vitest.expect);
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$5.only(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

function it$2(name, timeout, callback) {
  var param = function (param$1) {
    Curry._1(callback, Vitest.expect);
    
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$6.only(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

function itPromise$1(name, timeout, callback) {
  var param = function (param$1) {
    return Curry._1(callback, Vitest.expect);
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$7.only(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

var partial_arg$8 = Vitest.describe.only;

var partial_arg$9 = Vitest.test.only;

var partial_arg$10 = Vitest.it.only;

function describe$3(name, timeout, callback) {
  var param = function (param$1) {
    Curry._1(callback, undefined);
    
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$8.concurrent(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

function test$3(name, timeout, callback) {
  var param = function (param$1) {
    return Curry._1(callback, Vitest.expect);
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$9.concurrent(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

function it$3(name, timeout, callback) {
  var param = function (param$1) {
    return Curry._1(callback, Vitest.expect);
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$10.concurrent(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

var Concurrent$1 = {
  describe: describe$3,
  test: test$3,
  it: it$3
};

var Only = {
  describe: describe$2,
  test: test$2,
  testPromise: testPromise$1,
  it: it$2,
  itPromise: itPromise$1,
  Concurrent: Concurrent$1
};

var partial_arg$11 = Vitest.describe;

var partial_arg$12 = Vitest.test;

var partial_arg$13 = Vitest.test;

var partial_arg$14 = Vitest.it;

var partial_arg$15 = Vitest.it;

function describe$4(name, timeout, callback) {
  var param = function (param$1) {
    Curry._1(callback, undefined);
    
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$11.skip(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

function test$4(name, timeout, callback) {
  var param = function (param$1) {
    Curry._1(callback, Vitest.expect);
    
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$12.skip(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

function testPromise$2(name, timeout, callback) {
  var param = function (param$1) {
    return Curry._1(callback, Vitest.expect);
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$13.skip(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

function it$4(name, timeout, callback) {
  var param = function (param$1) {
    Curry._1(callback, Vitest.expect);
    
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$14.skip(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

function itPromise$2(name, timeout, callback) {
  var param = function (param$1) {
    return Curry._1(callback, Vitest.expect);
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$15.skip(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

var partial_arg$16 = Vitest.describe.skip;

var partial_arg$17 = Vitest.test.skip;

var partial_arg$18 = Vitest.it.skip;

function describe$5(name, timeout, callback) {
  var param = function (param$1) {
    Curry._1(callback, undefined);
    
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$16.concurrent(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

function test$5(name, timeout, callback) {
  var param = function (param$1) {
    return Curry._1(callback, Vitest.expect);
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$17.concurrent(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

function it$5(name, timeout, callback) {
  var param = function (param$1) {
    return Curry._1(callback, Vitest.expect);
  };
  var param$1 = Js_undefined.fromOption(timeout);
  partial_arg$18.concurrent(name, (function () {
          return Curry._1(param, undefined);
        }), param$1);
  
}

var Concurrent$2 = {
  describe: describe$5,
  test: test$5,
  it: it$5
};

var Skip = {
  describe: describe$4,
  test: test$4,
  testPromise: testPromise$2,
  it: it$4,
  itPromise: itPromise$2,
  Concurrent: Concurrent$2
};

function describe$6(name) {
  Vitest.describe.todo(name);
  
}

function test$6(name) {
  Vitest.test.todo(name);
  
}

function it$6(name) {
  Vitest.it.todo(name);
  
}

var Todo = {
  describe: describe$6,
  test: test$6,
  it: it$6
};

function beforeEachPromise(timeout, callback) {
  Vitest.beforeEach((function () {
          return Curry._1(callback, undefined);
        }), Js_undefined.fromOption(timeout));
  
}

function beforeAllPromise(timeout, callback) {
  Vitest.beforeAll((function () {
          return Curry._1(callback, undefined);
        }), Js_undefined.fromOption(timeout));
  
}

function afterEachPromise(timeout, callback) {
  Vitest.afterEach((function () {
          return Curry._1(callback, undefined);
        }), Js_undefined.fromOption(timeout));
  
}

function afterAllPromise(timeout, callback) {
  Vitest.afterAll((function () {
          return Curry._1(callback, undefined);
        }), Js_undefined.fromOption(timeout));
  
}

function toThrowError(message, expected) {
  expected.toThrowError(Js_undefined.fromOption(message));
  
}

var Int = {};

var Float = {};

var $$String = {};

var $$Array = {};

function toContain(expected, item) {
  Belt_List.toArray(expected).toContain(item);
  
}

function toHaveLength(expected, length) {
  Belt_List.toArray(expected).toHaveLength(length);
  
}

function toMatch(expected, list) {
  Belt_List.toArray(expected).toMatchObject(Belt_List.toArray(list));
  
}

var List = {
  toContain: toContain,
  toHaveLength: toHaveLength,
  toMatch: toMatch
};

var Dict = {};

var Expect = {
  toThrowError: toThrowError,
  Int: Int,
  Float: Float,
  $$String: $$String,
  $$Array: $$Array,
  List: List,
  Dict: Dict
};

function equal(message, a, b) {
  Vitest.assert.equal(a, b, Js_undefined.fromOption(message));
  
}

function deepEqual(message, a, b) {
  Vitest.assert.deepEqual(a, b, Js_undefined.fromOption(message));
  
}

var Assert = {
  equal: equal,
  deepEqual: deepEqual
};

function advanceTimersByTime(ms) {
  return Vitest.vi.advanceTimersByTime(ms);
}

function advanceTimersToNextTimer(param) {
  return Vitest.vi.advanceTimersToNextTimer();
}

function runAllTimers(param) {
  return Vitest.vi.runAllTimers();
}

function runOnlyPendingTimers(param) {
  return Vitest.vi.runOnlyPendingTimers();
}

function useFakeTimers(param) {
  return Vitest.vi.useFakeTimers();
}

function useRealTimers(param) {
  return Vitest.vi.useRealTimers();
}

function mockCurrentDate(date) {
  return Vitest.vi.mockCurrentDate(date);
}

function restoreCurrentDate(date) {
  return Vitest.vi.restoreCurrentDate(date);
}

function getMockedDate(param) {
  return Caml_option.null_to_opt(Vitest.vi.getMockedDate());
}

var Vi = {
  advanceTimersByTime: advanceTimersByTime,
  advanceTimersToNextTimer: advanceTimersToNextTimer,
  runAllTimers: runAllTimers,
  runOnlyPendingTimers: runOnlyPendingTimers,
  useFakeTimers: useFakeTimers,
  useRealTimers: useRealTimers,
  mockCurrentDate: mockCurrentDate,
  restoreCurrentDate: restoreCurrentDate,
  getMockedDate: getMockedDate
};

export {
  MakeRunner ,
  MakeConcurrentRunner ,
  describe ,
  test ,
  testPromise ,
  it ,
  itPromise ,
  Concurrent ,
  Only ,
  Skip ,
  Todo ,
  beforeEachPromise ,
  beforeAllPromise ,
  afterEachPromise ,
  afterAllPromise ,
  Expect ,
  Assert ,
  Vi ,
  
}
/* partial_arg Not a pure module */
