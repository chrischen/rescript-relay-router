// @generated
// This file is autogenerated from `routes.json`, do not edit manually.
@live
let makeLink = () => {
  `/`
}

@inline
let routePattern = "/"

@live
let isRouteActive = ({pathname}: RelayRouter__Bindings.History.location, ~exact: bool=false, ()): bool => {
  RelayRouter__Internal.matchPathWithOptions({"path": routePattern, "end": exact}, pathname)->Belt.Option.isSome
}

@live
let useIsRouteActive = (~exact=false, ()) => {
  let location = RelayRouterUtils.useLocation()
  React.useMemo1(() => isRouteActive(location, ~exact, ()), [location])
}
@live
type subRoute = [#Todos | #Users]

@live
let useActiveSubRoute = (): option<[#Todos | #Users]> => {
  let location = RelayRouterUtils.useLocation()
  React.useMemo1(() => {
    let {pathname} = location
    if RelayRouter__Internal.matchPath("/todos", pathname)->Belt.Option.isSome {
      Some(#Todos)
    } else if RelayRouter__Internal.matchPath("/users", pathname)->Belt.Option.isSome {
      Some(#Users)
    } else {
      None
    }
  }, [location])
}

@live
type prepareProps = {
  environment: RescriptRelay.Environment.t,
  location: RelayRouter__Bindings.History.location,
}

let makeRouteKey = (
  ~pathParams: Js.Dict.t<string>,
  ~queryParams: RelayRouter__Bindings.QueryParams.t
): string => {
  ignore(pathParams)
  ignore(queryParams)

  "Root:"


}

@live
let makePrepareProps = (. 
  ~environment: RescriptRelay.Environment.t,
  ~pathParams: Js.Dict.t<string>,
  ~queryParams: RelayRouter__Bindings.QueryParams.t,
  ~location: RelayRouter__Bindings.History.location,
): prepareProps => {
  ignore(pathParams)
  ignore(queryParams)
  {
    environment: environment,

    location: location,
  }
}

@live
type renderProps<'prepared> = {
  childRoutes: React.element,
  prepared: 'prepared,
  environment: RescriptRelay.Environment.t,
  location: RelayRouter__Bindings.History.location,
}

@live
type renderers<'prepared> = {
  prepare: prepareProps => 'prepared,
  prepareCode: option<(. prepareProps) => array<RelayRouterTypes.preloadAsset>>,
  render: renderProps<'prepared> => React.element,
}

@obj
external makeRenderer: (
  ~prepare: prepareProps => 'prepared,
  ~prepareCode: prepareProps => array<RelayRouterTypes.preloadAsset>=?,
  ~render: renderProps<'prepared> => React.element,
  unit
) => renderers<'prepared> = ""

