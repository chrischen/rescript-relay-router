// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as DatePeriod from "../../../DatePeriod.mjs";
import * as TodoStatus from "../../../TodoStatus.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as RelayRouter from "../../../../router/RelayRouter.mjs";
import * as ReactRouter from "react-router";
import * as RelayRouterUtils from "../../../../router/RelayRouterUtils.mjs";
import * as RelayRouter__Bindings from "../../../../router/RelayRouter__Bindings.mjs";
import * as RelayRouter__Internal from "../../../../router/RelayRouter__Internal.mjs";

function makeLink(datePeriod, statuses, param) {
  var queryParams = RelayRouter__Bindings.QueryParams.make(undefined);
  if (datePeriod !== undefined) {
    RelayRouter__Bindings.QueryParams.setParam(queryParams, "datePeriod", encodeURIComponent(DatePeriod.serialize(datePeriod)));
  }
  if (statuses !== undefined) {
    RelayRouter__Bindings.QueryParams.setParam(queryParams, "statuses", Belt_Array.map(statuses, (function (value) {
                  return encodeURIComponent(TodoStatus.serialize(value));
                })).join(","));
  }
  return "/todos/inactive" + RelayRouter__Bindings.QueryParams.toString(queryParams);
}

function isRouteActive(param, $staropt$star, param$1) {
  var exact = $staropt$star !== undefined ? $staropt$star : false;
  return Belt_Option.isSome(Caml_option.nullable_to_opt(ReactRouter.matchPath({
                      path: "/todos/inactive",
                      end: exact
                    }, param.pathname)));
}

function useIsRouteActive(exactOpt, param) {
  var exact = exactOpt !== undefined ? exactOpt : false;
  var $$location = RelayRouterUtils.useLocation(undefined);
  return React.useMemo((function () {
                return isRouteActive($$location, exact, undefined);
              }), [$$location]);
}

function makeRouteKey(pathParams, queryParams) {
  return "Root__Todos__Inactive:" + Belt_Option.getWithDefault(RelayRouter__Bindings.QueryParams.getParamByKey(queryParams, "datePeriod"), "") + Belt_Option.getWithDefault(RelayRouter__Bindings.QueryParams.getParamByKey(queryParams, "statuses"), "");
}

function makePrepareProps(environment, pathParams, queryParams, $$location) {
  return {
          environment: environment,
          location: $$location,
          datePeriod: Belt_Option.flatMap(RelayRouter__Bindings.QueryParams.getParamByKey(queryParams, "datePeriod"), (function (value) {
                  return DatePeriod.parse(decodeURIComponent(value));
                })),
          statuses: Belt_Option.map(RelayRouter__Bindings.QueryParams.getArrayParamByKey(queryParams, "statuses"), (function (value) {
                  return Belt_Array.keepMap(value, (function (value) {
                                return TodoStatus.parse(decodeURIComponent(value));
                              }));
                }))
        };
}

function parseQueryParams(search) {
  var queryParams = RelayRouter__Bindings.QueryParams.parse(search);
  return {
          datePeriod: Belt_Option.flatMap(RelayRouter__Bindings.QueryParams.getParamByKey(queryParams, "datePeriod"), (function (value) {
                  return DatePeriod.parse(decodeURIComponent(value));
                })),
          statuses: Belt_Option.map(RelayRouter__Bindings.QueryParams.getArrayParamByKey(queryParams, "statuses"), (function (value) {
                  return Belt_Array.keepMap(value, (function (value) {
                                return TodoStatus.parse(decodeURIComponent(value));
                              }));
                }))
        };
}

function makeQueryParams(datePeriod, statuses, param) {
  return {
          datePeriod: datePeriod,
          statuses: statuses
        };
}

function setQueryParams(newParams, currentSearch, navigationMode_Opt, removeNotControlledParamsOpt, history, param) {
  var navigationMode_ = navigationMode_Opt !== undefined ? navigationMode_Opt : /* Push */0;
  var removeNotControlledParams = removeNotControlledParamsOpt !== undefined ? removeNotControlledParamsOpt : true;
  var queryParams = removeNotControlledParams ? RelayRouter__Bindings.QueryParams.make(undefined) : RelayRouter__Bindings.QueryParams.parse(currentSearch);
  RelayRouter__Bindings.QueryParams.setParamOpt(queryParams, "datePeriod", Belt_Option.map(newParams.datePeriod, (function (datePeriod) {
              return encodeURIComponent(DatePeriod.serialize(datePeriod));
            })));
  RelayRouter__Bindings.QueryParams.setParamOpt(queryParams, "statuses", Belt_Option.map(newParams.statuses, (function (statuses) {
              return Belt_Array.map(statuses, (function (value) {
                              return encodeURIComponent(TodoStatus.serialize(value));
                            })).join(",");
            })));
  return RelayRouter__Internal.setQueryParams(queryParams, navigationMode_, history);
}

function useQueryParams(param) {
  var match = RelayRouter.useRouterContext(undefined);
  var history = match.history;
  var match$1 = RelayRouterUtils.useLocation(undefined);
  var search = match$1.search;
  var currentQueryParams = React.useMemo((function () {
          return parseQueryParams(search);
        }), [search]);
  var searchRef = React.useRef(search);
  var currentQueryParamsRef = React.useRef(currentQueryParams);
  searchRef.current = search;
  currentQueryParamsRef.current = currentQueryParams;
  return {
          queryParams: currentQueryParams,
          setParams: React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4) {
                    var navigationMode_ = param$2 !== undefined ? param$2 : /* Push */0;
                    var removeNotControlledParams = param$3 !== undefined ? param$3 : true;
                    var newParams = Curry._1(param, currentQueryParamsRef.current);
                    if (param$1 !== undefined) {
                      Curry._1(param$1, newParams);
                    }
                    return setQueryParams(newParams, searchRef.current, navigationMode_, removeNotControlledParams, history, undefined);
                  };
                }), [])
        };
}

export {
  makeLink ,
  isRouteActive ,
  useIsRouteActive ,
  makeRouteKey ,
  makePrepareProps ,
  parseQueryParams ,
  makeQueryParams ,
  setQueryParams ,
  useQueryParams ,
  
}
/* react Not a pure module */
