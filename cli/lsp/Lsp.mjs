// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Url from "url";
import * as Path from "path";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import Chokidar from "chokidar";
import FastGlob from "fast-glob";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as VscodeJsonrpc from "vscode-jsonrpc";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as RescriptRelayRouterCli__Utils from "../RescriptRelayRouterCli__Utils.mjs";
import * as RescriptRelayRouterCli__Parser from "../RescriptRelayRouterCli__Parser.mjs";
import * as MessagesJs from "vscode-jsonrpc/lib/messages.js";
import * as RescriptRelayRouterLsp__Resolvers from "./RescriptRelayRouterLsp__Resolvers.mjs";

var initialized = {
  contents: false
};

var shutdownRequestAlreadyReceived = {
  contents: false
};

var dummyPos = {
  line: -1,
  character: -1
};

function deleteFromDict(dict, key) {
  return Js_dict.unsafeDeleteKey(dict, key);
}

var jsonrpcVersion = "2.0";

function decodeLspMessage(msg) {
  var match = msg.method;
  if (match === "textDocument/completion") {
    return {
            TAG: /* Completion */6,
            _0: msg.params
          };
  } else if (match === "textDocument/didClose") {
    return {
            TAG: /* DidCloseTextDocumentNotification */2,
            _0: msg.params
          };
  } else if (match === "textDocument/documentLink") {
    return {
            TAG: /* DocumentLinks */5,
            _0: msg.params
          };
  } else if (match === "textDocument/didChange") {
    return {
            TAG: /* DidChangeTextDocumentNotification */1,
            _0: msg.params
          };
  } else if (match === "textDocument/didOpen") {
    return {
            TAG: /* DidOpenTextDocumentNotification */0,
            _0: msg.params
          };
  } else if (match === "textDocument/hover") {
    return {
            TAG: /* Hover */3,
            _0: msg.params
          };
  } else if (match === "textDocument/codeLens") {
    return {
            TAG: /* CodeLens */4,
            _0: msg.params
          };
  } else {
    return /* UnmappedMessage */0;
  }
}

var LspMessage = {
  decodeLspMessage: decodeLspMessage
};

function asMessage(notification) {
  return {
          jsonrpc: jsonrpcVersion,
          method: "textDocument/publishDiagnostics",
          params: notification._0
        };
}

var $$Notification = {
  asMessage: asMessage
};

function make(code, message) {
  return {
          code: code ? -32600 : -32002,
          message: message
        };
}

var $$Error = {
  make: make
};

function make$1(textDocumentSyncOpt, hoverProviderOpt, completionProvider, codeLensProviderOpt, documentLinkProviderOpt, param) {
  var hoverProvider = hoverProviderOpt !== undefined ? hoverProviderOpt : false;
  var codeLensProvider = codeLensProviderOpt !== undefined ? codeLensProviderOpt : false;
  var documentLinkProvider = documentLinkProviderOpt !== undefined ? documentLinkProviderOpt : false;
  return {
          capabilities: {
            textDocumentSync: 1,
            hoverProvider: hoverProvider,
            completionProvider: completionProvider,
            codeLensProvider: codeLensProvider,
            documentLinkProvider: documentLinkProvider
          }
        };
}

var InitializeResult = {
  make: make$1
};

function $$null(param) {
  return null;
}

var Result = {
  $$null: $$null
};

function make$2(id, error, result, param) {
  return {
          jsonrpc: jsonrpcVersion,
          id: id,
          error: error,
          result: result
        };
}

var $$Response = {
  make: make$2
};

var Message = {
  jsonrpcVersion: jsonrpcVersion,
  LspMessage: LspMessage,
  $$Notification: $$Notification,
  $$Error: $$Error,
  InitializeResult: InitializeResult,
  Result: Result,
  $$Response: $$Response
};

function defaultSendFn(param) {
  
}

var sendFn = {
  contents: defaultSendFn
};

function send(msg) {
  return Curry._1(sendFn.contents, msg);
}

var StreamMessageWriter = {};

var StreamMessageReader = {};

var Rpc = {
  StreamMessageWriter: StreamMessageWriter,
  StreamMessageReader: StreamMessageReader
};

function make$3(config, getRouteFileContents, routeRenderersCache) {
  return {
          routeStructure: RescriptRelayRouterCli__Parser.readRouteStructure(config, getRouteFileContents),
          config: config,
          routeFileNames: Curry._2(FastGlob.sync, ["*.json"], {
                cwd: RescriptRelayRouterCli__Utils.pathInRoutesFolder(config, undefined, undefined)
              }),
          routeRenderersCache: routeRenderersCache
        };
}

function isValidRouteFile(t, fileUri) {
  var fileUri$1 = Url.fileURLToPath(fileUri);
  var fileName = Path.basename(fileUri$1);
  return fileUri$1 === RescriptRelayRouterCli__Utils.pathInRoutesFolder(t.config, fileName, undefined);
}

function getCurrentRouteStructure(t) {
  return t.routeStructure;
}

function getConfig(t) {
  return t.config;
}

function getRouteFileNames(t) {
  return t.routeFileNames;
}

function getRouteRenderersCache(t) {
  return t.routeRenderersCache;
}

var CurrentContext = {
  make: make$3,
  isValidRouteFile: isValidRouteFile,
  getCurrentRouteStructure: getCurrentRouteStructure,
  getConfig: getConfig,
  getRouteFileNames: getRouteFileNames,
  getRouteRenderersCache: getRouteRenderersCache
};

function start(mode, config) {
  var routeFilesCaches = {};
  var routeRenderersCache = {};
  var getRouteFileContents = function (fileName) {
    var contents = Js_dict.get(routeFilesCaches, fileName);
    if (contents !== undefined) {
      return {
              TAG: /* Ok */0,
              _0: contents
            };
    }
    try {
      return {
              TAG: /* Ok */0,
              _0: Fs.readFileSync(RescriptRelayRouterCli__Utils.pathInRoutesFolder(config, fileName, undefined), "utf-8")
            };
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === Js_exn.$$Error) {
        return {
                TAG: /* Error */1,
                _0: exn._1
              };
      }
      throw exn;
    }
  };
  var filesWithDiagnostics = {
    contents: []
  };
  var currentLspResolveContext = {
    contents: make$3(config, getRouteFileContents, routeRenderersCache)
  };
  var rebuildLspResolveContext = function (param) {
    var lspResolveContext = make$3(config, getRouteFileContents, routeRenderersCache);
    currentLspResolveContext.contents = lspResolveContext;
    var filesWithDiagnosticsAtLastPublish = filesWithDiagnostics.contents.slice();
    var currentFilesWithDiagnostics = [];
    Belt_Array.forEach(RescriptRelayRouterLsp__Resolvers.diagnostics(lspResolveContext.routeStructure.errors), (function (param) {
            var fileName = param[0];
            currentFilesWithDiagnostics.push(fileName);
            return Curry._1(sendFn.contents, asMessage(/* PublishDiagnostics */{
                            _0: {
                              uri: RescriptRelayRouterCli__Utils.pathInRoutesFolder(lspResolveContext.config, fileName, undefined),
                              diagnostics: param[1]
                            }
                          }));
          }));
    filesWithDiagnostics.contents = currentFilesWithDiagnostics;
    return Belt_Array.forEach(filesWithDiagnosticsAtLastPublish, (function (fileName) {
                  if (!currentFilesWithDiagnostics.includes(fileName)) {
                    return Curry._1(sendFn.contents, asMessage(/* PublishDiagnostics */{
                                    _0: {
                                      uri: RescriptRelayRouterCli__Utils.pathInRoutesFolder(lspResolveContext.config, fileName, undefined),
                                      diagnostics: []
                                    }
                                  }));
                  }
                  
                }));
  };
  var openedFile = function (uri, text) {
    var key = Path.basename(uri);
    var match = Path.extname(uri);
    switch (match) {
      case ".json" :
          routeFilesCaches[key] = text;
          return rebuildLspResolveContext(undefined);
      case ".res" :
          routeRenderersCache[key] = text;
          return ;
      default:
        return ;
    }
  };
  var updateOpenedFile = function (uri, text) {
    var key = Path.basename(uri);
    var targetCache = Path.extname(uri) === ".res" ? routeRenderersCache : routeFilesCaches;
    if (Belt_Option.isSome(Js_dict.get(targetCache, key))) {
      targetCache[key] = text;
      return rebuildLspResolveContext(undefined);
    }
    
  };
  var closeFile = function (uri) {
    var key = Path.basename(uri);
    Js_dict.unsafeDeleteKey(routeFilesCaches, key);
    Js_dict.unsafeDeleteKey(routeRenderersCache, key);
    return rebuildLspResolveContext(undefined);
  };
  var theWatcher = Chokidar.watch(RescriptRelayRouterCli__Utils.pathInRoutesFolder(config, "*.json", undefined)).on("change", (function (param) {
            return rebuildLspResolveContext(undefined);
          })).on("unlink", (function (param) {
          return rebuildLspResolveContext(undefined);
        }));
  var onMessage = function (msg) {
    var ctx = currentLspResolveContext.contents;
    if (MessagesJs.isNotificationMessage(msg)) {
      var match = initialized.contents;
      var match$1 = msg.method;
      if (match) {
        if (match$1 === "exit") {
          if (shutdownRequestAlreadyReceived.contents === true) {
            process.exit(0);
          } else {
            process.exit(1);
          }
        } else {
          var params = decodeLspMessage(msg);
          if (typeof params !== "number") {
            switch (params.TAG | 0) {
              case /* DidOpenTextDocumentNotification */0 :
                  var params$1 = params._0;
                  if (isValidRouteFile(ctx, params$1.textDocument.uri)) {
                    openedFile(params$1.textDocument.uri, params$1.textDocument.text);
                  }
                  break;
              case /* DidChangeTextDocumentNotification */1 :
                  var params$2 = params._0;
                  var match$2 = isValidRouteFile(ctx, params$2.textDocument.uri);
                  var match$3 = params$2.contentChanges.slice().pop();
                  if (match$2 && match$3 !== undefined) {
                    updateOpenedFile(params$2.textDocument.uri, match$3.text);
                  }
                  break;
              case /* DidCloseTextDocumentNotification */2 :
                  closeFile(params._0.textDocument.uri);
                  break;
              default:
                
            }
          }
          
        }
        return ;
      }
      console.error("Could not handle notification message.");
      return ;
    }
    if (!MessagesJs.isRequestMessage(msg)) {
      return ;
    }
    var match$4 = initialized.contents;
    var match$5 = msg.method;
    if (!match$4) {
      if (match$5 !== "initialize") {
        return Curry._1(sendFn.contents, make$2(msg.id, {
                        code: -32002,
                        message: "Server not initialized."
                      }, undefined, undefined));
      } else if (match$5 === "initialize") {
        initialized.contents = true;
        return Curry._1(sendFn.contents, make$2(msg.id, undefined, Caml_option.some(make$1(/* Full */0, true, {
                                triggerCharacters: [
                                  "\"",
                                  "="
                                ]
                              }, true, true, undefined)), undefined));
      } else {
        return Curry._1(sendFn.contents, make$2(msg.id, {
                        code: -32600,
                        message: "Unrecognized editor request."
                      }, undefined, undefined));
      }
    }
    if (match$5 === "shutdown") {
      if (shutdownRequestAlreadyReceived.contents === true) {
        return Curry._1(sendFn.contents, make$2(msg.id, {
                        code: -32600,
                        message: "Language server already received the shutdown request."
                      }, undefined, undefined));
      } else {
        shutdownRequestAlreadyReceived.contents = true;
        theWatcher.close();
        return Curry._1(sendFn.contents, make$2(msg.id, undefined, null, undefined));
      }
    }
    if (match$5 === "initialize") {
      return Curry._1(sendFn.contents, make$2(msg.id, undefined, null, undefined));
    }
    var ctx$1 = currentLspResolveContext.contents;
    var params$3 = decodeLspMessage(msg);
    if (typeof params$3 !== "number") {
      switch (params$3.TAG | 0) {
        case /* Hover */3 :
            var params$4 = params$3._0;
            if (Path.extname(params$4.textDocument.uri) !== ".json") {
              return ;
            }
            var hover = RescriptRelayRouterLsp__Resolvers.hover(ctx$1.routeStructure, {
                  fileUri: Path.basename(params$4.textDocument.uri),
                  pos: params$4.position,
                  config: ctx$1.config,
                  routeFileNames: ctx$1.routeFileNames
                });
            var result = hover !== undefined ? hover : null;
            return Curry._1(sendFn.contents, make$2(msg.id, undefined, Caml_option.some(result), undefined));
        case /* CodeLens */4 :
            var params$5 = params$3._0;
            var match$6 = Path.extname(params$5.textDocument.uri);
            switch (match$6) {
              case ".json" :
                  var codeLenses = RescriptRelayRouterLsp__Resolvers.codeLens(ctx$1.routeStructure, {
                        fileUri: Path.basename(params$5.textDocument.uri),
                        pos: dummyPos,
                        config: ctx$1.config,
                        routeFileNames: ctx$1.routeFileNames
                      });
                  var result$1 = codeLenses !== undefined ? codeLenses : null;
                  return Curry._1(sendFn.contents, make$2(msg.id, undefined, Caml_option.some(result$1), undefined));
              case ".res" :
                  var fileName = Path.basename(params$5.textDocument.uri);
                  if (!fileName.endsWith("route_renderer.res")) {
                    return ;
                  }
                  var routeRendererContent = Js_dict.get(ctx$1.routeRenderersCache, fileName);
                  var result$2;
                  if (routeRendererContent !== undefined) {
                    var codeLenses$1 = RescriptRelayRouterLsp__Resolvers.routeRendererCodeLens(ctx$1.routeStructure, fileName, routeRendererContent, {
                          fileUri: fileName,
                          pos: dummyPos,
                          config: ctx$1.config,
                          routeFileNames: ctx$1.routeFileNames
                        });
                    result$2 = codeLenses$1 !== undefined ? codeLenses$1 : null;
                  } else {
                    result$2 = null;
                  }
                  return Curry._1(sendFn.contents, make$2(msg.id, undefined, Caml_option.some(result$2), undefined));
              default:
                return ;
            }
        case /* DocumentLinks */5 :
            var params$6 = params$3._0;
            if (Path.extname(params$6.textDocument.uri) !== ".json") {
              return ;
            }
            var documentLinks = RescriptRelayRouterLsp__Resolvers.documentLinks(ctx$1.routeStructure, {
                  fileUri: Path.basename(params$6.textDocument.uri),
                  pos: dummyPos,
                  config: ctx$1.config,
                  routeFileNames: ctx$1.routeFileNames
                });
            var result$3 = documentLinks !== undefined ? documentLinks : null;
            return Curry._1(sendFn.contents, make$2(msg.id, undefined, Caml_option.some(result$3), undefined));
        case /* Completion */6 :
            var params$7 = params$3._0;
            if (Path.extname(params$7.textDocument.uri) !== ".json") {
              return Curry._1(sendFn.contents, make$2(msg.id, undefined, null, undefined));
            }
            var completionItems = RescriptRelayRouterLsp__Resolvers.completion(ctx$1.routeStructure, {
                  fileUri: Path.basename(params$7.textDocument.uri),
                  pos: params$7.position,
                  config: ctx$1.config,
                  routeFileNames: ctx$1.routeFileNames
                });
            var result$4 = completionItems !== undefined ? completionItems : null;
            return Curry._1(sendFn.contents, make$2(msg.id, undefined, Caml_option.some(result$4), undefined));
        default:
          
      }
    }
    return Curry._1(sendFn.contents, make$2(msg.id, {
                    code: -32600,
                    message: "Unrecognized editor request."
                  }, undefined, undefined));
  };
  if (mode) {
    var writer = new VscodeJsonrpc.StreamMessageWriter(process.stdout);
    var reader = new VscodeJsonrpc.StreamMessageReader(process.stdin);
    sendFn.contents = (function (msg) {
        writer.write(msg);
        
      });
    reader.listen(onMessage);
    console.error("Starting LSP in stdio mode.");
  } else {
    sendFn.contents = (function (prim) {
        process.send(prim);
        
      });
    process.on("message", onMessage);
    console.error("Starting LSP in Node RPC.");
  }
  return theWatcher;
}

var Bindings;

var Utils;

var Resolvers;

export {
  initialized ,
  shutdownRequestAlreadyReceived ,
  dummyPos ,
  Bindings ,
  Utils ,
  Resolvers ,
  deleteFromDict ,
  Message ,
  defaultSendFn ,
  sendFn ,
  send ,
  Rpc ,
  CurrentContext ,
  start ,
  
}
/* fs Not a pure module */
