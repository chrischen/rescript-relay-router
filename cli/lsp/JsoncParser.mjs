// Generated by ReScript, PLEASE EDIT WITH CARE


function decodeParseErrorCode(code) {
  switch (code) {
    case 1 :
        return /* InvalidSymbol */0;
    case 2 :
        return /* InvalidNumberFormat */1;
    case 3 :
        return /* PropertyNameExpected */2;
    case 4 :
        return /* ValueExpected */3;
    case 5 :
        return /* ColonExpected */4;
    case 6 :
        return /* CommaExpected */5;
    case 7 :
        return /* CloseBraceExpected */6;
    case 8 :
        return /* CloseBracketExpected */7;
    case 9 :
        return /* EndOfFileExpected */8;
    case 10 :
        return /* InvalidCommentToken */9;
    case 11 :
        return /* UnexpectedEndOfComment */10;
    case 12 :
        return /* UnexpectedEndOfString */11;
    case 13 :
        return /* UnexpectedEndOfNumber */12;
    case 14 :
        return /* InvalidUnicode */13;
    case 15 :
        return /* InvalidEscapeCharacter */14;
    case 16 :
        return /* InvalidCharacter */15;
    default:
      return ;
  }
}

function nodeToString(node) {
  switch (node.TAG | 0) {
    case /* Object */0 :
        return "object";
    case /* Array */1 :
        return "array";
    case /* Boolean */2 :
        return "boolean(" + (
                node.value ? "true" : "false"
              ) + "})";
    case /* String */3 :
        return "string(\"" + node.value + "\")";
    case /* Number */4 :
        return "number(" + String(node.value) + ")";
    case /* Null */5 :
        return "null";
    
  }
}

export {
  decodeParseErrorCode ,
  nodeToString ,
  
}
/* No side effect */
