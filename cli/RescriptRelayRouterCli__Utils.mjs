// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Path from "path";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as RescriptRelayRouterCli__Types from "./RescriptRelayRouterCli__Types.mjs";
import * as RescriptRelayRouterCli__Parser from "./RescriptRelayRouterCli__Parser.mjs";
import * as RescriptRelayRouterCli__Bindings from "./RescriptRelayRouterCli__Bindings.mjs";

var Invalid_config = /* @__PURE__ */Caml_exceptions.create("RescriptRelayRouterCli__Utils.Invalid_config");

function resolveFullPath(path, filepath) {
  return Path.resolve(Path.dirname(filepath), path);
}

function load(param) {
  var match = RescriptRelayRouterCli__Bindings.CosmiConfig.make(undefined).search();
  var config;
  if (match == null) {
    throw {
          RE_EXN_ID: Invalid_config,
          _1: "Could not find router config. Please make sure you've defined a router config either in 'rescriptRelayRouter' in package.json, rescriptRelayRouter.json, or in rescriptRelayRouter.config.js/rescriptRelayRouter.config.cjs",
          Error: new Error()
        };
  }
  var config$1 = match.config;
  if (config$1 !== undefined) {
    var filepath = match.filepath;
    var config$2 = Caml_option.valFromOption(config$1);
    var routesFolderPath = Js_dict.get(config$2, "routesFolderPath");
    var routesFolderPath$1;
    if (routesFolderPath !== undefined) {
      routesFolderPath$1 = resolveFullPath(routesFolderPath, filepath);
    } else {
      throw {
            RE_EXN_ID: Invalid_config,
            _1: "You must set 'routesFolderPath', a relative path to where your routing code will be located.",
            Error: new Error()
          };
    }
    config = {
      generatedPath: resolveFullPath(Belt_Option.getWithDefault(Js_dict.get(config$2, "generatedPath"), Path.join(routesFolderPath$1, "__generated__")), filepath),
      routesFolderPath: routesFolderPath$1
    };
  } else {
    throw {
          RE_EXN_ID: Invalid_config,
          _1: "Could not find router config. Please make sure you've defined a router config either in 'rescriptRelayRouter' in package.json, rescriptRelayRouter.json, or in rescriptRelayRouter.config.js/rescriptRelayRouter.config.cjs",
          Error: new Error()
        };
  }
  if (!Fs.existsSync(config.generatedPath)) {
    console.log("Folder for generatedPath not found, creating...");
    Fs.mkdirSync(config.generatedPath, {"recursive":true});
  }
  if (!Fs.existsSync(config.routesFolderPath)) {
    console.log("Folder for routesFolderPath not found, creating...");
    Fs.mkdirSync(config.routesFolderPath, {"recursive":true});
  }
  return config;
}

function exists(param) {
  return Belt_Option.isSome(Caml_option.nullable_to_opt(RescriptRelayRouterCli__Bindings.CosmiConfig.make(undefined).search()));
}

var Config = {
  load: load,
  exists: exists
};

function toTypeStr(queryParam) {
  if (typeof queryParam !== "number") {
    if (queryParam.TAG === /* Array */0) {
      return "array<" + toTypeStr(queryParam._0) + ">";
    } else {
      return queryParam.moduleName + ".t";
    }
  }
  switch (queryParam) {
    case /* String */0 :
        return "string";
    case /* Boolean */1 :
        return "bool";
    case /* Int */2 :
        return "int";
    case /* Float */3 :
        return "float";
    
  }
}

function toSerializer(queryParam, variableName) {
  if (typeof queryParam === "number") {
    switch (queryParam) {
      case /* String */0 :
          return variableName + "->Js.Global.encodeURIComponent";
      case /* Boolean */1 :
          return "string_of_bool(" + variableName + ")";
      case /* Int */2 :
          return "Belt.Int.toString(" + variableName + ")";
      case /* Float */3 :
          return "Js.Float.toString(" + variableName + ")";
      
    }
  } else {
    if (queryParam.TAG !== /* Array */0) {
      return variableName + "->" + queryParam.moduleName + ".serialize->Js.Global.encodeURIComponent";
    }
    var inner = queryParam._0;
    if (typeof inner !== "number") {
      if (inner.TAG === /* Array */0) {
        return variableName;
      } else {
        return variableName + "->Belt.Array.map(value => value->" + inner.moduleName + ".serialize->Js.Global.encodeURIComponent)->Js.Array2.joinWith(\",\")";
      }
    }
    switch (inner) {
      case /* String */0 :
          return variableName + "->Belt.Array.map(Js.Global.encodeURIComponent)->Js.Array2.joinWith(\",\")";
      case /* Boolean */1 :
          return variableName + "->Belt.Array.map(string_of_bool)->Js.Array2.joinWith(\",\")";
      case /* Int */2 :
          return variableName + "->Belt.Array.map(Belt.Int.toString)->Js.Array2.joinWith(\",\")";
      case /* Float */3 :
          return variableName + "->Belt.Array.map(Js.Float.toString)->Js.Array2.joinWith(\",\")";
      
    }
  }
}

function toParser(queryParam, variableName) {
  if (typeof queryParam === "number") {
    switch (queryParam) {
      case /* String */0 :
          return "Some(" + variableName + "->Js.Global.decodeURIComponent)";
      case /* Boolean */1 :
          return "switch " + variableName + " {\n      | \"true\" => Some(true)\n      | \"false\" => Some(false)\n      | _ => None\n      }";
      case /* Int */2 :
          return "Belt.Int.fromString(" + variableName + ")";
      case /* Float */3 :
          return "Js.Float.fromString(" + variableName + ")";
      
    }
  } else {
    if (queryParam.TAG !== /* Array */0) {
      return variableName + "->Js.Global.decodeURIComponent->" + queryParam.moduleName + ".parse";
    }
    var inner = queryParam._0;
    if (typeof inner !== "number") {
      if (inner.TAG === /* Array */0) {
        return variableName;
      } else {
        return variableName + "->Belt.Array.map(value => value->Js.Global.decodeURIComponent->" + inner.moduleName + ".parse)";
      }
    }
    switch (inner) {
      case /* String */0 :
          return variableName + "->Js.Global.decodeURIComponent";
      case /* Boolean */1 :
          return variableName + "->Belt.Array.map(value => switch value {\n      | \"true\" => Some(true)\n      | \"false\" => Some(false)\n      | _ => None\n      })";
      case /* Int */2 :
          return variableName + "->Belt.Array.map(Belt.Int.fromString)";
      case /* Float */3 :
          return variableName + "->Belt.Array.map(Js.Float.fromString)";
      
    }
  }
}

var QueryParams = {
  toTypeStr: toTypeStr,
  toSerializer: toSerializer,
  toParser: toParser
};

function pathInRoutesFolder(config, fileNameOpt, param) {
  var fileName = fileNameOpt !== undefined ? fileNameOpt : "";
  return Path.join(config.routesFolderPath, fileName);
}

function pathInGeneratedFolder(config, fileNameOpt, param) {
  var fileName = fileNameOpt !== undefined ? fileNameOpt : "";
  return Path.join(config.generatedPath, fileName);
}

function fromRendererFileName(rendererName) {
  return rendererName.replace("_route_renderer.res", "");
}

function toRendererFileName(rendererName) {
  return rendererName + "_route_renderer.res";
}

function rawRouteToMatchable(route) {
  return {
          path: RescriptRelayRouterCli__Types.RoutePath.getPathSegment(route.path),
          params: route.params,
          name: RescriptRelayRouterCli__Types.RouteName.getRouteName(route.name),
          sourceFile: route.sourceFile,
          children: Belt_Array.map(route.children, rawRouteToMatchable),
          queryParams: route.queryParams
        };
}

function routeChildrenToPrintable(routeChildren) {
  var routes = [];
  Belt_Array.forEach(routeChildren, (function (child) {
          return mapRouteChild(child, routes);
        }));
  return routes;
}

function mapRouteChild(child, routes) {
  if (child.TAG === /* Include */0) {
    return Belt_Array.forEach(child._0.content, (function (child) {
                  return mapRouteChild(child, routes);
                }));
  }
  routes.push(parsedToPrintable(child._0));
  
}

function parsedToPrintable(routeEntry) {
  return {
          path: routeEntry.routePath,
          params: Belt_Array.map(routeEntry.pathParams, (function (p) {
                  return p.text;
                })),
          name: routeEntry.name,
          children: routeChildrenToPrintable(Belt_Option.getWithDefault(routeEntry.children, [])),
          queryParams: Js_dict.fromArray(Belt_Array.map(routeEntry.queryParams, (function (param) {
                      return [
                              param.name.text,
                              param.queryParam[1]
                            ];
                    }))),
          sourceFile: routeEntry.sourceFile
        };
}

var Decode_error = /* @__PURE__ */Caml_exceptions.create("RescriptRelayRouterCli__Utils.Decode_error");

function readRouteStructure(config) {
  var routeStructure = RescriptRelayRouterCli__Parser.readRouteStructure(config, (function (fileName) {
          try {
            return {
                    TAG: /* Ok */0,
                    _0: Fs.readFileSync(pathInRoutesFolder(config, fileName, undefined), "utf-8")
                  };
          }
          catch (raw_exn){
            var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
            if (exn.RE_EXN_ID === Js_exn.$$Error) {
              return {
                      TAG: /* Error */1,
                      _0: exn._1
                    };
            }
            throw exn;
          }
        }));
  if (routeStructure.errors.length !== 0) {
    throw {
          RE_EXN_ID: Decode_error,
          _1: routeStructure,
          Error: new Error()
        };
  }
  var printable = routeChildrenToPrintable(routeStructure.result);
  var routeNames = {};
  var extractRoutes = function (routes) {
    return Belt_Array.forEach(routes, (function (route) {
                  routeNames[RescriptRelayRouterCli__Types.RouteName.getFullRouteName(route.name)] = [
                    route,
                    /* [] */0
                  ];
                  return extractRoutes(route.children);
                }));
  };
  extractRoutes(printable);
  return [
          printable,
          routeNames
        ];
}

function ensureRouteStructure(pathToRoutesFolder) {
  var routesFolderPath = Path.resolve(pathToRoutesFolder);
  var generatedPath = Path.join(routesFolderPath, "../__generated__");
  if (!Fs.existsSync(routesFolderPath)) {
    Fs.mkdirSync(routesFolderPath);
    console.log("[init] Routes folder did not exist. Created it at '" + routesFolderPath + "'.");
  }
  if (!Fs.existsSync(generatedPath)) {
    Fs.mkdirSync(generatedPath);
    return ;
  }
  
}

function printIndentation(str, indentation) {
  str.contents = str.contents + "  ".repeat(indentation);
  
}

function add(str, s) {
  str.contents = str.contents + s;
  
}

function printNestedRouteModules(route, indentation) {
  var moduleName = RescriptRelayRouterCli__Types.RouteName.getRouteName(route.name);
  var str = {
    contents: ""
  };
  var strEnd = {
    contents: ""
  };
  printIndentation(str, indentation);
  add(str, "module " + moduleName + " = {\n");
  printIndentation(str, indentation + 1 | 0);
  add(str, "module Route = " + RescriptRelayRouterCli__Types.RouteName.toGeneratedRouteModuleName(route.name) + "\n");
  printIndentation(strEnd, indentation);
  add(strEnd, "}\n");
  Belt_Array.forEach(route.children, (function (route) {
          return add(str, printNestedRouteModules(route, indentation + 1 | 0));
        }));
  return "\n" + str.contents + Belt_Array.reverse(strEnd.contents.split("\n")).join("\n");
}

function queryParamToQueryParamDecoder(param, key) {
  if (typeof param !== "number" && param.TAG === /* Array */0) {
    return "getArrayParamByKey(\"" + key + "\")->Belt.Option.map(value => value->Belt.Array.keepMap(value => " + toParser(param._0, "value") + ")),\n";
  }
  return "getParamByKey(\"" + key + "\")->Belt.Option.flatMap(value => " + toParser(param, "value") + "),\n";
}

export {
  Invalid_config ,
  Config ,
  QueryParams ,
  pathInRoutesFolder ,
  pathInGeneratedFolder ,
  fromRendererFileName ,
  toRendererFileName ,
  rawRouteToMatchable ,
  routeChildrenToPrintable ,
  mapRouteChild ,
  parsedToPrintable ,
  Decode_error ,
  readRouteStructure ,
  ensureRouteStructure ,
  printIndentation ,
  add ,
  printNestedRouteModules ,
  queryParamToQueryParamDecoder ,
  
}
/* fs Not a pure module */
