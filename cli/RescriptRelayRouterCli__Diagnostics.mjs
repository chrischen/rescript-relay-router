// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import Chalk from "chalk";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as RescriptRelayRouterCli__Parser from "./RescriptRelayRouterCli__Parser.mjs";

var Chalk$1 = {};

function prettyPrintDiagnostic(lines, diagnostic, sourceFile) {
  var fileLocText = Curry._1(Chalk.blackBright, String(diagnostic.loc.start.line + 1 | 0) + ":" + String(diagnostic.loc.start.column + 1 | 0) + "-" + String(diagnostic.loc.end_.line + 1 | 0) + ":" + String(diagnostic.loc.end_.column + 1 | 0));
  console.log(Curry._1(Chalk.red, "Error in file:") + " " + Curry._1(Chalk.blueBright, sourceFile) + ":" + fileLocText);
  console.log("\n");
  Belt_Array.forEachWithIndex(lines, (function (index, line) {
          if (!(index > (diagnostic.loc.start.line - 5 | 0) && index < (diagnostic.loc.end_.line + 5 | 0))) {
            return ;
          }
          var highlightOnThisLine = index >= diagnostic.loc.start.line && index <= diagnostic.loc.end_.line;
          if (highlightOnThisLine) {
            var highlightStartOffset = index === diagnostic.loc.start.line ? diagnostic.loc.start.column : 0;
            var highlightEndOffset = index === diagnostic.loc.end_.line ? diagnostic.loc.end_.column : line.length;
            var lineText = line.slice(0, highlightStartOffset) + Curry._1(Chalk.bold.red, line.slice(highlightStartOffset, highlightEndOffset)) + line.slice(highlightEndOffset);
            console.log("  " + Curry._1(Chalk.bold.red, String(index + 1 | 0)) + " " + Curry._1(Chalk.blackBright, "┆") + " " + lineText);
            return ;
          }
          console.log("  " + String(index + 1 | 0) + " " + Curry._1(Chalk.blackBright, "┆") + " " + line);
          
        }));
  console.log("\n  " + diagnostic.message);
  
}

function printDiagnostics(param, config) {
  var routeFiles = param.routeFiles;
  return Belt_Array.forEach(param.errors, (function (decodeError) {
                var match = Js_dict.get(routeFiles, decodeError.routeFileName);
                if (match !== undefined) {
                  prettyPrintDiagnostic(match.rawText.split("\n"), decodeError, RescriptRelayRouterCli__Parser.pathInRoutesFolder(config, match.fileName, undefined));
                  console.log("\n");
                } else {
                  console.log("Internal error: Did not find \"" + decodeError.routeFileName + "\".");
                }
                
              }));
}

export {
  Chalk$1 as Chalk,
  prettyPrintDiagnostic ,
  printDiagnostics ,
  
}
/* chalk Not a pure module */
